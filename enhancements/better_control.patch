diff --git a/desktop.ini b/desktop.ini
new file mode 100644
index 0000000..ceae44e
--- /dev/null
+++ b/desktop.ini
@@ -0,0 +1,2 @@
+[LocalizedFileNames]
+Super Mario 64 (U) [!].z64=@Super Mario 64 (U) [!],0
diff --git a/enhancements/tight_controls.patch b/enhancements/tight_controls.patch
new file mode 100644
index 0000000..a6f1c3b
--- /dev/null
+++ b/enhancements/tight_controls.patch
@@ -0,0 +1,31 @@
+diff --git a/src/game/mario_actions_moving.c b/src/game/mario_actions_moving.c
+index 8f672fa..7507608 100644
+--- a/src/game/mario_actions_moving.c
++++ b/src/game/mario_actions_moving.c
+@@ -461,9 +461,14 @@ void update_walking_speed(struct MarioState *m) {
+         m->forwardVel = 48.0f;
+     }
+ 
+-    m->faceAngle[1] =
+-        m->intendedYaw - approach_s32((s16)(m->intendedYaw - m->faceAngle[1]), 0, 0x800, 0x800);
+-    apply_slope_accel(m);
++	if (analog_stick_held_back(m)) {
++        m->faceAngle[1] = m->intendedYaw;
++    }
++	else {
++        m->faceAngle[1] =
++            m->intendedYaw - approach_s32((s16)(m->intendedYaw - m->faceAngle[1]), 0, 0xC00, 0xC00);
++	}
++	apply_slope_accel(m);
+ }
+ 
+ s32 should_begin_sliding(struct MarioState *m) {
+@@ -806,7 +811,7 @@ s32 act_walking(struct MarioState *m) {
+         return begin_braking_action(m);
+     }
+ 
+-    if (analog_stick_held_back(m) && m->forwardVel >= 16.0f) {
++    if (analog_stick_held_back(m) && m->forwardVel >= 10.0f) {
+         return set_mario_action(m, ACT_TURNING_AROUND, 0);
+     }
+ 
diff --git a/include/sm64.h b/include/sm64.h
index 632224e..b408677 100644
--- a/include/sm64.h
+++ b/include/sm64.h
@@ -296,6 +296,7 @@
 #define ACT_GETTING_BLOWN              0x010208B8 // (0x0B8 | ACT_FLAG_AIR | ACT_FLAG_INVULNERABLE | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION)
 #define ACT_THROWN_FORWARD             0x010208BD // (0x0BD | ACT_FLAG_AIR | ACT_FLAG_INVULNERABLE | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION)
 #define ACT_THROWN_BACKWARD            0x010208BE // (0x0BE | ACT_FLAG_AIR | ACT_FLAG_INVULNERABLE | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION)
+#define ACT_WALL_SLIDE                 0x010208BF // Wall Slide
 
 // group 0x0C0: submerged actions
 #define ACT_WATER_IDLE                 0x380022C0 // (0x0C0 | ACT_FLAG_STATIONARY | ACT_FLAG_SWIMMING | ACT_FLAG_PAUSE_EXIT | ACT_FLAG_SWIMMING_OR_FLYING | ACT_FLAG_WATER_OR_TEXT)
diff --git a/src/game/mario.c b/src/game/mario.c
index 5b103fa..6cedbef 100644
--- a/src/game/mario.c
+++ b/src/game/mario.c
@@ -769,6 +769,13 @@ static void set_mario_y_vel_based_on_fspeed(struct MarioState *m, f32 initialVel
     // It was likely trampoline related based on code location.
     m->vel[1] = initialVelY + get_additive_y_vel_for_jumps() + m->forwardVel * multiplier;
 
+    if (m->marioObj->platform != NULL && m->marioObj->platform->oVelY > 0.0f){
+
+        m->vel[1] += m->marioObj->platform->oVelY;
+        m->pos[1] += m->marioObj->platform->oVelY;
+        
+    }
+
     if (m->squishTimer != 0 || m->quicksandDepth > 1.0f) {
         m->vel[1] *= 0.5f;
     }
@@ -838,6 +845,11 @@ static u32 set_mario_action_airborne(struct MarioState *m, u32 action, u32 actio
             }
             m->wallKickTimer = 0;
             break;
+        
+        case ACT_WALL_SLIDE:
+            m->vel[1] = 4.0f;
+            mario_set_forward_vel(m, 8.0f);
+            break;
 
         case ACT_SIDE_FLIP:
             set_mario_y_vel_based_on_fspeed(m, 62.0f, 0.0f);
@@ -874,6 +886,8 @@ static u32 set_mario_action_airborne(struct MarioState *m, u32 action, u32 actio
             //  too much velocity, but misses backwards longs allowing high negative speeds.
             if ((m->forwardVel *= 1.5f) > 48.0f) {
                 m->forwardVel = 48.0f;
+            } else if (m->forwardVel < -48.0f) {
+                m->forwardVel = -48.0f;
             }
             break;
 
diff --git a/src/game/mario_actions_airborne.c b/src/game/mario_actions_airborne.c
index a9f0089..4633608 100644
--- a/src/game/mario_actions_airborne.c
+++ b/src/game/mario_actions_airborne.c
@@ -15,6 +15,36 @@
 #include "save_file.h"
 #include "thread6.h"
 
+s32 act_wall_slide(struct MarioState *m) {
+    m->marioObj->header.gfx.angle[1] = m->faceAngle[1];
+    if (m->input & INPUT_A_PRESSED) {
+        m->faceAngle[1] += 0x8000;
+        m->particleFlags |= PARTICLE_VERTICAL_STAR;
+        return set_mario_action(m, ACT_WALL_KICK_AIR, 0);
+    }
+    switch (perform_air_step(m, 0)) {
+        case AIR_STEP_NONE:
+            set_mario_action(m, ACT_FREEFALL, 0);
+            break;
+
+        case AIR_STEP_LANDED:
+            set_mario_action(m, ACT_JUMP_LAND_STOP, 0);
+            break;
+
+        case AIR_STEP_HIT_LAVA_WALL:
+            lava_boost_on_wall(m);
+            break;
+    }
+    if (m->vel[1] < -20.0f) {
+        m->vel[1] = -20.0f;
+    }
+    mario_set_forward_vel(m, 1.0f);
+    play_sound(SOUND_MOVING_TERRAIN_SLIDE + m->terrainSoundAddend, m->marioObj->header.gfx.cameraToObject);
+    m->particleFlags |= PARTICLE_DUST;
+    m->marioObj->header.gfx.angle[1] = m->faceAngle[1]+0x8000;
+    return FALSE;
+}
+
 void play_flip_sounds(struct MarioState *m, s16 frame1, s16 frame2, s16 frame3) {
     s32 animFrame = m->marioObj->header.gfx.unk38.animFrame;
     if (animFrame == frame1 || animFrame == frame2 || animFrame == frame3) {
@@ -493,7 +523,7 @@ s32 act_triple_jump(struct MarioState *m) {
     play_mario_sound(m, SOUND_ACTION_TERRAIN_JUMP, SOUND_MARIO_YAHOO);
 #endif
 
-    common_air_action_step(m, ACT_TRIPLE_JUMP_LAND, MARIO_ANIM_TRIPLE_JUMP, 0);
+    common_air_action_step(m, ACT_TRIPLE_JUMP_LAND, MARIO_ANIM_TRIPLE_JUMP, AIR_STEP_CHECK_HANG);
 #ifdef VERSION_SH
     if (m->action == ACT_TRIPLE_JUMP_LAND) {
         queue_rumble_data(5, 40);
@@ -509,7 +539,7 @@ s32 act_backflip(struct MarioState *m) {
     }
 
     play_mario_sound(m, SOUND_ACTION_TERRAIN_JUMP, SOUND_MARIO_YAH_WAH_HOO);
-    common_air_action_step(m, ACT_BACKFLIP_LAND, MARIO_ANIM_BACKFLIP, 0);
+    common_air_action_step(m, ACT_BACKFLIP_LAND, MARIO_ANIM_BACKFLIP, AIR_STEP_CHECK_HANG);
 #ifdef VERSION_SH
     if (m->action == ACT_BACKFLIP_LAND) {
         queue_rumble_data(5, 40);
@@ -542,7 +572,8 @@ s32 act_freefall(struct MarioState *m) {
             break;
     }
 
-    common_air_action_step(m, ACT_FREEFALL_LAND, animation, AIR_STEP_CHECK_LEDGE_GRAB);
+    common_air_action_step(m, ACT_FREEFALL_LAND, animation, AIR_STEP_CHECK_LEDGE_GRAB
+                            | AIR_STEP_CHECK_HANG);
     return FALSE;
 }
 
@@ -600,7 +631,8 @@ s32 act_side_flip(struct MarioState *m) {
 
     play_mario_sound(m, SOUND_ACTION_TERRAIN_JUMP, 0);
 
-    if (common_air_action_step(m, ACT_SIDE_FLIP_LAND, MARIO_ANIM_SLIDEFLIP, AIR_STEP_CHECK_LEDGE_GRAB)
+    if (common_air_action_step(m, ACT_SIDE_FLIP_LAND, MARIO_ANIM_SLIDEFLIP, AIR_STEP_CHECK_LEDGE_GRAB
+                                | AIR_STEP_CHECK_HANG)
         != AIR_STEP_GRABBED_LEDGE) {
         m->marioObj->header.gfx.angle[1] += 0x8000;
     }
@@ -622,7 +654,8 @@ s32 act_wall_kick_air(struct MarioState *m) {
     }
 
     play_mario_jump_sound(m);
-    common_air_action_step(m, ACT_JUMP_LAND, MARIO_ANIM_SLIDEJUMP, AIR_STEP_CHECK_LEDGE_GRAB);
+    common_air_action_step(m, ACT_JUMP_LAND, MARIO_ANIM_SLIDEJUMP, AIR_STEP_CHECK_LEDGE_GRAB
+                            | AIR_STEP_CHECK_HANG);
     return FALSE;
 }
 
@@ -641,7 +674,8 @@ s32 act_long_jump(struct MarioState *m) {
         m->actionState = 1;
     }
 
-    common_air_action_step(m, ACT_LONG_JUMP_LAND, animation, AIR_STEP_CHECK_LEDGE_GRAB);
+    common_air_action_step(m, ACT_LONG_JUMP_LAND, animation, AIR_STEP_CHECK_LEDGE_GRAB
+                            | AIR_STEP_CHECK_HANG);
 #ifdef VERSION_SH
     if (m->action == ACT_LONG_JUMP_LAND) {
         queue_rumble_data(5, 40);
@@ -924,9 +958,17 @@ s32 act_ground_pound(struct MarioState *m) {
                 vec3f_copy(m->marioObj->header.gfx.pos, m->pos);
             }
         }
+        
 
         m->vel[1] = -50.0f;
         mario_set_forward_vel(m, 0.0f);
+        if (gMarioState->action == ACT_GROUND_POUND) {
+       if (gMarioState->controller->buttonPressed & B_BUTTON) {
+           gMarioState->action = ACT_DIVE;
+           gMarioState->forwardVel = 48.f;
+           gMarioState->vel[1] = 30.f;
+       }
+       }
 
         set_mario_animation(m, m->actionArg == 0 ? MARIO_ANIM_START_GROUND_POUND
                                                  : MARIO_ANIM_TRIPLE_JUMP_GROUND_POUND);
@@ -1305,11 +1347,12 @@ s32 act_air_hit_wall(struct MarioState *m) {
         mario_drop_held_object(m);
     }
 
-    if (++(m->actionTimer) <= 2) {
+    if (++(m->actionTimer) <= 2) { //LUISFIX FIXED HSWK (HYPERSPEED WALL KICK) BY RESETTING MARIO'S SPEED BEFORE PERFORMING THE KICK//
         if (m->input & INPUT_A_PRESSED) {
             m->vel[1] = 52.0f;
             m->faceAngle[1] += 0x8000;
-            return set_mario_action(m, ACT_WALL_KICK_AIR, 0);
+            m->forwardVel = 0.0f;
+            return set_mario_action(m, ACT_WALL_SLIDE, 0);
         }
     } else if (m->forwardVel >= 38.0f) {
         m->wallKickTimer = 5;
@@ -1328,7 +1371,7 @@ s32 act_air_hit_wall(struct MarioState *m) {
         if (m->forwardVel > 8.0f) {
             mario_set_forward_vel(m, -8.0f);
         }
-        return set_mario_action(m, ACT_SOFT_BONK, 0);
+        return set_mario_action(m, ACT_WALL_SLIDE, 0);
     }
 
 #ifdef AVOID_UB
@@ -1728,6 +1771,7 @@ s32 act_flying(struct MarioState *m) {
         return set_mario_action(m, ACT_GROUND_POUND, 1);
     }
 
+
     if (!(m->flags & MARIO_WING_CAP)) {
         if (m->area->camera->mode == CAMERA_MODE_BEHIND_MARIO) {
             set_camera_mode(m->area->camera, m->area->camera->defMode, 1);
@@ -1956,7 +2000,8 @@ s32 act_flying_triple_jump(struct MarioState *m) {
 
 s32 act_top_of_pole_jump(struct MarioState *m) {
     play_mario_jump_sound(m);
-    common_air_action_step(m, ACT_FREEFALL_LAND, MARIO_ANIM_HANDSTAND_JUMP, AIR_STEP_CHECK_LEDGE_GRAB);
+    common_air_action_step(m, ACT_FREEFALL_LAND, MARIO_ANIM_HANDSTAND_JUMP, AIR_STEP_CHECK_LEDGE_GRAB
+                            | AIR_STEP_CHECK_HANG);
     return FALSE;
 }
 
@@ -2073,6 +2118,7 @@ s32 mario_execute_airborne_action(struct MarioState *m) {
         case ACT_HOLD_FREEFALL:        cancel = act_hold_freefall(m);        break;
         case ACT_SIDE_FLIP:            cancel = act_side_flip(m);            break;
         case ACT_WALL_KICK_AIR:        cancel = act_wall_kick_air(m);        break;
+        case ACT_WALL_SLIDE:           cancel = act_wall_slide(m); break;
         case ACT_TWIRLING:             cancel = act_twirling(m);             break;
         case ACT_WATER_JUMP:           cancel = act_water_jump(m);           break;
         case ACT_HOLD_WATER_JUMP:      cancel = act_hold_water_jump(m);      break;
diff --git a/src/game/mario_actions_automatic.c b/src/game/mario_actions_automatic.c
index ee6720b..1137508 100644
--- a/src/game/mario_actions_automatic.c
+++ b/src/game/mario_actions_automatic.c
@@ -359,9 +359,9 @@ s32 update_hang_moving(struct MarioState *m) {
     m->slideVelX = m->forwardVel * sins(m->faceAngle[1]);
     m->slideVelZ = m->forwardVel * coss(m->faceAngle[1]);
 
-    m->vel[0] = m->slideVelX;
+    m->vel[0] = m->slideVelX * 2;
     m->vel[1] = 0.0f;
-    m->vel[2] = m->slideVelZ;
+    m->vel[2] = m->slideVelZ * 2;
 
     nextPos[0] = m->pos[0] - m->ceil->normal.y * m->vel[0];
     nextPos[2] = m->pos[2] - m->ceil->normal.y * m->vel[2];
diff --git a/src/game/mario_actions_moving.c b/src/game/mario_actions_moving.c
index 7dd3097..4e10161 100644
--- a/src/game/mario_actions_moving.c
+++ b/src/game/mario_actions_moving.c
@@ -461,9 +461,14 @@ void update_walking_speed(struct MarioState *m) {
         m->forwardVel = 48.0f;
     }
 
-    m->faceAngle[1] =
-        m->intendedYaw - approach_s32((s16)(m->intendedYaw - m->faceAngle[1]), 0, 0x800, 0x800);
-    apply_slope_accel(m);
+	if (analog_stick_held_back(m)) {
+        m->faceAngle[1] = m->intendedYaw;
+    }
+	else {
+        m->faceAngle[1] =
+            m->intendedYaw - approach_s32((s16)(m->intendedYaw - m->faceAngle[1]), 0, 0xC00, 0xC00);
+	}
+	apply_slope_accel(m);
 }
 
 s32 should_begin_sliding(struct MarioState *m) {
@@ -806,7 +811,7 @@ s32 act_walking(struct MarioState *m) {
         return begin_braking_action(m);
     }
 
-    if (analog_stick_held_back(m) && m->forwardVel >= 16.0f) {
+    if (analog_stick_held_back(m) && m->forwardVel >= 10.0f) {
         return set_mario_action(m, ACT_TURNING_AROUND, 0);
     }
 
diff --git a/src/game/mario_actions_stationary.c b/src/game/mario_actions_stationary.c
index 3791d11..4b93602 100644
--- a/src/game/mario_actions_stationary.c
+++ b/src/game/mario_actions_stationary.c
@@ -1058,6 +1058,14 @@ s32 act_ground_pound_land(struct MarioState *m) {
         return set_mario_action(m, ACT_BUTT_SLIDE, 0);
     }
 
+    if (gMarioState->action == ACT_GROUND_POUND_LAND) {
+       if (gMarioState->controller->buttonPressed & A_BUTTON) {
+           gMarioState->action = ACT_TRIPLE_JUMP;
+           gMarioState->forwardVel *= 0.8f;
+           gMarioState->vel[1] = 60.f;
+       }
+   }
+
     landing_step(m, MARIO_ANIM_GROUND_POUND_LANDING, ACT_BUTT_SLIDE_STOP);
     return 0;
 }
diff --git a/src/game/mario_actions_submerged.c b/src/game/mario_actions_submerged.c
index 72e845f..e44e441 100644
--- a/src/game/mario_actions_submerged.c
+++ b/src/game/mario_actions_submerged.c
@@ -228,7 +228,6 @@ static void stationary_slow_down(struct MarioState *m) {
 }
 
 static void update_swimming_speed(struct MarioState *m, f32 decelThreshold) {
-    f32 buoyancy = get_buoyancy(m);
     f32 maxSpeed = 28.0f;
 
     if (m->action & ACT_FLAG_STATIONARY) {
@@ -247,13 +246,13 @@ static void update_swimming_speed(struct MarioState *m, f32 decelThreshold) {
         m->forwardVel -= 0.5f;
     }
 
-    m->vel[0] = m->forwardVel * coss(m->faceAngle[0]) * sins(m->faceAngle[1]);
-    m->vel[1] = m->forwardVel * sins(m->faceAngle[0]) + buoyancy;
-    m->vel[2] = m->forwardVel * coss(m->faceAngle[0]) * coss(m->faceAngle[1]);
+    m->vel[0] = m->forwardVel * coss(m->faceAngle[0]) * sins(m->faceAngle[1]) * 1.3;
+    m->vel[1] = m->forwardVel * sins(m->faceAngle[0]) * 1.3;
+    m->vel[2] = m->forwardVel * coss(m->faceAngle[0]) * coss(m->faceAngle[1]) * 1.3;
 }
 
 static void update_swimming_yaw(struct MarioState *m) {
-    s16 targetYawVel = -(s16)(10.0f * m->controller->stickX);
+    s16 targetYawVel = -(s16)(10.0f * m->controller->stickX) * 1.5;
 
     if (targetYawVel > 0) {
         if (m->angleVel[1] < 0) {
@@ -284,23 +283,41 @@ static void update_swimming_yaw(struct MarioState *m) {
 static void update_swimming_pitch(struct MarioState *m) {
     s16 targetPitch = -(s16)(252.0f * m->controller->stickY);
 
-    s16 pitchVel;
-    if (m->faceAngle[0] < 0) {
+    s16 atSurface = m->pos[1] >= m->waterLevel - 100;
+
+    s16 pitchVel = -(s16)(3.0f * m->controller->stickY);
+
+    if ((m->faceAngle[0] += pitchVel) > 16065){
+        m->faceAngle[0] = 16065;
+    }
+    if ((m->faceAngle[0] += pitchVel) < -16065){
+        m->faceAngle[0] = -16065;
+    }
+    
+    if (atSurface) {
+        if (m->faceAngle[0] < 0) {
         pitchVel = 0x100;
     } else {
         pitchVel = 0x200;
     }
-
-    if (m->faceAngle[0] < targetPitch) {
-        if ((m->faceAngle[0] += pitchVel) > targetPitch) {
-            m->faceAngle[0] = targetPitch;
-        }
-    } else if (m->faceAngle[0] > targetPitch) {
-        if ((m->faceAngle[0] -= pitchVel) < targetPitch) {
-            m->faceAngle[0] = targetPitch;
+            if (m->faceAngle[0] < targetPitch) {
+                if ((m->faceAngle[0] += pitchVel) > targetPitch) {
+                m->faceAngle[0] = targetPitch;
+            }
+            
+        }   else if (m->faceAngle[0] > targetPitch) {
+                if ((m->faceAngle[0] -= pitchVel) < targetPitch) {
+                m->faceAngle[0] = targetPitch;
         }
     }
+    
+    }
+                  
+        
+
 }
+    
+
 
 static void common_idle_step(struct MarioState *m, s32 animation, s32 arg) {
     s16 *val = &m->marioBodyState->headAngle[0];
diff --git a/tools/ido7.1_compiler.tar/ido7.1_compiler.tar b/tools/ido7.1_compiler.tar/ido7.1_compiler.tar
new file mode 100644
index 0000000..7d62e61
Binary files /dev/null and b/tools/ido7.1_compiler.tar/ido7.1_compiler.tar differ
diff --git a/tools/iplfontutil b/tools/iplfontutil
new file mode 100644
index 0000000..739721b
Binary files /dev/null and b/tools/iplfontutil differ
diff --git a/wallslide.patch b/wallslide.patch
new file mode 100644
index 0000000..81ff2e7
--- /dev/null
+++ b/wallslide.patch
@@ -0,0 +1,125 @@
+diff --git a/desktop.ini b/desktop.ini
+new file mode 100644
+index 0000000..ceae44e
+--- /dev/null
++++ b/desktop.ini
+@@ -0,0 +1,2 @@
++[LocalizedFileNames]
++Super Mario 64 (U) [!].z64=@Super Mario 64 (U) [!],0
+diff --git a/include/sm64.h b/include/sm64.h
+index 632224e..b408677 100644
+--- a/include/sm64.h
++++ b/include/sm64.h
+@@ -296,6 +296,7 @@
+ #define ACT_GETTING_BLOWN              0x010208B8 // (0x0B8 | ACT_FLAG_AIR | ACT_FLAG_INVULNERABLE | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION)
+ #define ACT_THROWN_FORWARD             0x010208BD // (0x0BD | ACT_FLAG_AIR | ACT_FLAG_INVULNERABLE | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION)
+ #define ACT_THROWN_BACKWARD            0x010208BE // (0x0BE | ACT_FLAG_AIR | ACT_FLAG_INVULNERABLE | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION)
++#define ACT_WALL_SLIDE                 0x010208BF // Wall Slide
+ 
+ // group 0x0C0: submerged actions
+ #define ACT_WATER_IDLE                 0x380022C0 // (0x0C0 | ACT_FLAG_STATIONARY | ACT_FLAG_SWIMMING | ACT_FLAG_PAUSE_EXIT | ACT_FLAG_SWIMMING_OR_FLYING | ACT_FLAG_WATER_OR_TEXT)
+diff --git a/src/game/mario.c b/src/game/mario.c
+index 5b103fa..f9523f8 100644
+--- a/src/game/mario.c
++++ b/src/game/mario.c
+@@ -838,6 +838,11 @@ static u32 set_mario_action_airborne(struct MarioState *m, u32 action, u32 actio
+             }
+             m->wallKickTimer = 0;
+             break;
++        
++        case ACT_WALL_SLIDE:
++            m->vel[1] = 4.0f;
++            mario_set_forward_vel(m, 8.0f);
++            break;
+ 
+         case ACT_SIDE_FLIP:
+             set_mario_y_vel_based_on_fspeed(m, 62.0f, 0.0f);
+diff --git a/src/game/mario_actions_airborne.c b/src/game/mario_actions_airborne.c
+index a9f0089..9ca53fb 100644
+--- a/src/game/mario_actions_airborne.c
++++ b/src/game/mario_actions_airborne.c
+@@ -1,6 +1,7 @@
+ #include <PR/ultratypes.h>
+ 
+ #include "sm64.h"
++#define ACT_WALL_SLIDE                 0x010208BF // Wall Slide
+ #include "area.h"
+ #include "audio/data.h"
+ #include "audio/external.h"
+@@ -15,6 +16,36 @@
+ #include "save_file.h"
+ #include "thread6.h"
+ 
++s32 act_wall_slide(struct MarioState *m) {
++    m->marioObj->header.gfx.angle[1] = m->faceAngle[1];
++    if (m->input & INPUT_A_PRESSED) {
++        m->faceAngle[1] += 0x8000;
++        m->particleFlags |= PARTICLE_VERTICAL_STAR;
++        return set_mario_action(m, ACT_WALL_KICK_AIR, 0);
++    }
++    switch (perform_air_step(m, 0)) {
++        case AIR_STEP_NONE:
++            set_mario_action(m, ACT_FREEFALL, 0);
++            break;
++
++        case AIR_STEP_LANDED:
++            set_mario_action(m, ACT_JUMP_LAND_STOP, 0);
++            break;
++
++        case AIR_STEP_HIT_LAVA_WALL:
++            lava_boost_on_wall(m);
++            break;
++    }
++    if (m->vel[1] < -20.0f) {
++        m->vel[1] = -20.0f;
++    }
++    mario_set_forward_vel(m, 1.0f);
++    play_sound(SOUND_MOVING_TERRAIN_SLIDE + m->terrainSoundAddend, m->marioObj->header.gfx.cameraToObject);
++    m->particleFlags |= PARTICLE_DUST;
++    m->marioObj->header.gfx.angle[1] = m->faceAngle[1]+0x8000;
++    return FALSE;
++}
++
+ void play_flip_sounds(struct MarioState *m, s16 frame1, s16 frame2, s16 frame3) {
+     s32 animFrame = m->marioObj->header.gfx.unk38.animFrame;
+     if (animFrame == frame1 || animFrame == frame2 || animFrame == frame3) {
+@@ -1305,11 +1336,12 @@ s32 act_air_hit_wall(struct MarioState *m) {
+         mario_drop_held_object(m);
+     }
+ 
+-    if (++(m->actionTimer) <= 2) {
++    if (++(m->actionTimer) <= 2) { //LUISFIX FIXED HSWK (HYPERSPEED WALL KICK) BY RESETTING MARIO'S SPEED BEFORE PERFORMING THE KICK//
+         if (m->input & INPUT_A_PRESSED) {
+             m->vel[1] = 52.0f;
+             m->faceAngle[1] += 0x8000;
+-            return set_mario_action(m, ACT_WALL_KICK_AIR, 0);
++            m->forwardVel = 0.0f;
++            return set_mario_action(m, ACT_WALL_SLIDE, 0);
+         }
+     } else if (m->forwardVel >= 38.0f) {
+         m->wallKickTimer = 5;
+@@ -1328,7 +1360,7 @@ s32 act_air_hit_wall(struct MarioState *m) {
+         if (m->forwardVel > 8.0f) {
+             mario_set_forward_vel(m, -8.0f);
+         }
+-        return set_mario_action(m, ACT_SOFT_BONK, 0);
++        return set_mario_action(m, ACT_WALL_SLIDE, 0);
+     }
+ 
+ #ifdef AVOID_UB
+@@ -2073,6 +2105,7 @@ s32 mario_execute_airborne_action(struct MarioState *m) {
+         case ACT_HOLD_FREEFALL:        cancel = act_hold_freefall(m);        break;
+         case ACT_SIDE_FLIP:            cancel = act_side_flip(m);            break;
+         case ACT_WALL_KICK_AIR:        cancel = act_wall_kick_air(m);        break;
++        case ACT_WALL_SLIDE:           cancel = act_wall_slide(m); break;
+         case ACT_TWIRLING:             cancel = act_twirling(m);             break;
+         case ACT_WATER_JUMP:           cancel = act_water_jump(m);           break;
+         case ACT_HOLD_WATER_JUMP:      cancel = act_hold_water_jump(m);      break;
+diff --git a/tools/ido7.1_compiler.tar/ido7.1_compiler.tar b/tools/ido7.1_compiler.tar/ido7.1_compiler.tar
+new file mode 100644
+index 0000000..7d62e61
+Binary files /dev/null and b/tools/ido7.1_compiler.tar/ido7.1_compiler.tar differ
+diff --git a/tools/iplfontutil b/tools/iplfontutil
+new file mode 100644
+index 0000000..739721b
+Binary files /dev/null and b/tools/iplfontutil differ
